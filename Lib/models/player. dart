class Player {
  String name;
  String avatarPath;
  int level;
  int currentXP;
  int xpToNextLevel;
  int availablePoints;

  int strength;
  int intelligence;
  int vitality;
  int energy;
  int sense;

  List<String> quests;
  List<String> completedQuests;
  List<String> defeatedMonsters;
  List<String> shadows;

  Player({
    this.name = '',
    this.avatarPath = '',
    this.level = 1,
    this.currentXP = 0,
    this.xpToNextLevel = 100,
    this.availablePoints = 0,
    this.strength = 0,
    this.intelligence = 0,
    this.vitality = 0,
    this.energy = 0,
    this.sense = 0,
    List<String>? quests,
    List<String>? completedQuests,
    List<String>? defeatedMonsters,
    List<String>? shadows,
  })  : quests = quests ?? [],
        completedQuests = completedQuests ?? [],
        defeatedMonsters = defeatedMonsters ?? [],
        shadows = shadows ?? [];

  void gainXP(int amount) {
    currentXP += amount;
    while (currentXP >= xpToNextLevel) {
      levelUp();
    }
  }

  void levelUp() {
    currentXP -= xpToNextLevel;
    level += 1;
    availablePoints += 1;

    // زيادة XP المطلوبة للمستوى التالي
    xpToNextLevel += 50;
  }

  void assignPoint(String stat) {
    if (availablePoints <= 0) return;

    switch (stat) {
      case 'Strength':
        strength += 1;
        break;
      case 'Intelligence':
        intelligence += 1;
        break;
      case 'Vitality':
        vitality += 1;
        break;
      case 'Energy':
        energy += 1;
        break;
      case 'Sense':
        sense += 1;
        break;
    }
    availablePoints -= 1;
  }

  void completeQuest(String quest) {
    if (quests.contains(quest) && !completedQuests.contains(quest)) {
      completedQuests.add(quest);
      gainXP(50); // أو أي قيمة XP مناسبة
    }
  }

  void defeatMonster(String monsterName) {
    if (!defeatedMonsters.contains(monsterName)) {
      defeatedMonsters.add(monsterName);
    }
  }

  bool canExtractShadows() {
    return level >= 20;
  }
}
